// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: firewall.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FirewallServiceClient is the client API for FirewallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirewallServiceClient interface {
	CreateFirewall(ctx context.Context, in *Firewall, opts ...grpc.CallOption) (*Firewall, error)
	// rpc UpdateFirewall (Firewall) returns (Firewall) {}
	DeleteFirewall(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*Firewall, error)
	GetFirewall(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*Firewall, error)
	ListFirewall(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*FirewallList, error)
}

type firewallServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFirewallServiceClient(cc grpc.ClientConnInterface) FirewallServiceClient {
	return &firewallServiceClient{cc}
}

func (c *firewallServiceClient) CreateFirewall(ctx context.Context, in *Firewall, opts ...grpc.CallOption) (*Firewall, error) {
	out := new(Firewall)
	err := c.cc.Invoke(ctx, "/firewall.v1alpha1.FirewallService/CreateFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallServiceClient) DeleteFirewall(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*Firewall, error) {
	out := new(Firewall)
	err := c.cc.Invoke(ctx, "/firewall.v1alpha1.FirewallService/DeleteFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallServiceClient) GetFirewall(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*Firewall, error) {
	out := new(Firewall)
	err := c.cc.Invoke(ctx, "/firewall.v1alpha1.FirewallService/GetFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firewallServiceClient) ListFirewall(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*FirewallList, error) {
	out := new(FirewallList)
	err := c.cc.Invoke(ctx, "/firewall.v1alpha1.FirewallService/ListFirewall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirewallServiceServer is the server API for FirewallService service.
// All implementations must embed UnimplementedFirewallServiceServer
// for forward compatibility
type FirewallServiceServer interface {
	CreateFirewall(context.Context, *Firewall) (*Firewall, error)
	// rpc UpdateFirewall (Firewall) returns (Firewall) {}
	DeleteFirewall(context.Context, *FilterOptions) (*Firewall, error)
	GetFirewall(context.Context, *FilterOptions) (*Firewall, error)
	ListFirewall(context.Context, *FilterOptions) (*FirewallList, error)
	mustEmbedUnimplementedFirewallServiceServer()
}

// UnimplementedFirewallServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFirewallServiceServer struct {
}

func (UnimplementedFirewallServiceServer) CreateFirewall(context.Context, *Firewall) (*Firewall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFirewall not implemented")
}
func (UnimplementedFirewallServiceServer) DeleteFirewall(context.Context, *FilterOptions) (*Firewall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFirewall not implemented")
}
func (UnimplementedFirewallServiceServer) GetFirewall(context.Context, *FilterOptions) (*Firewall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirewall not implemented")
}
func (UnimplementedFirewallServiceServer) ListFirewall(context.Context, *FilterOptions) (*FirewallList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFirewall not implemented")
}
func (UnimplementedFirewallServiceServer) mustEmbedUnimplementedFirewallServiceServer() {}

// UnsafeFirewallServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirewallServiceServer will
// result in compilation errors.
type UnsafeFirewallServiceServer interface {
	mustEmbedUnimplementedFirewallServiceServer()
}

func RegisterFirewallServiceServer(s grpc.ServiceRegistrar, srv FirewallServiceServer) {
	s.RegisterService(&FirewallService_ServiceDesc, srv)
}

func _FirewallService_CreateFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Firewall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServiceServer).CreateFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.v1alpha1.FirewallService/CreateFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServiceServer).CreateFirewall(ctx, req.(*Firewall))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallService_DeleteFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServiceServer).DeleteFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.v1alpha1.FirewallService/DeleteFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServiceServer).DeleteFirewall(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallService_GetFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServiceServer).GetFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.v1alpha1.FirewallService/GetFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServiceServer).GetFirewall(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirewallService_ListFirewall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirewallServiceServer).ListFirewall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/firewall.v1alpha1.FirewallService/ListFirewall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirewallServiceServer).ListFirewall(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// FirewallService_ServiceDesc is the grpc.ServiceDesc for FirewallService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirewallService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "firewall.v1alpha1.FirewallService",
	HandlerType: (*FirewallServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFirewall",
			Handler:    _FirewallService_CreateFirewall_Handler,
		},
		{
			MethodName: "DeleteFirewall",
			Handler:    _FirewallService_DeleteFirewall_Handler,
		},
		{
			MethodName: "GetFirewall",
			Handler:    _FirewallService_GetFirewall_Handler,
		},
		{
			MethodName: "ListFirewall",
			Handler:    _FirewallService_ListFirewall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "firewall.proto",
}
