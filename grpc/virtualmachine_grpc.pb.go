// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: virtualmachine.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VirtualMachineServiceClient is the client API for VirtualMachineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualMachineServiceClient interface {
	CreateVirtualMachine(ctx context.Context, in *VirtualMachine, opts ...grpc.CallOption) (*VirtualMachine, error)
	GetVirtualMachine(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*VirtualMachine, error)
	ListVirtualMachine(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*VirtualMachineList, error)
	DeleteVirtualMachine(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*VirtualMachine, error)
	UpdateVirtualMachine(ctx context.Context, in *VirtualMachine, opts ...grpc.CallOption) (*VirtualMachine, error)
}

type virtualMachineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualMachineServiceClient(cc grpc.ClientConnInterface) VirtualMachineServiceClient {
	return &virtualMachineServiceClient{cc}
}

func (c *virtualMachineServiceClient) CreateVirtualMachine(ctx context.Context, in *VirtualMachine, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/virtualmachine.v1alpha1.VirtualMachineService/CreateVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) GetVirtualMachine(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/virtualmachine.v1alpha1.VirtualMachineService/GetVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) ListVirtualMachine(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*VirtualMachineList, error) {
	out := new(VirtualMachineList)
	err := c.cc.Invoke(ctx, "/virtualmachine.v1alpha1.VirtualMachineService/ListVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) DeleteVirtualMachine(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/virtualmachine.v1alpha1.VirtualMachineService/DeleteVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineServiceClient) UpdateVirtualMachine(ctx context.Context, in *VirtualMachine, opts ...grpc.CallOption) (*VirtualMachine, error) {
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, "/virtualmachine.v1alpha1.VirtualMachineService/UpdateVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualMachineServiceServer is the server API for VirtualMachineService service.
// All implementations must embed UnimplementedVirtualMachineServiceServer
// for forward compatibility
type VirtualMachineServiceServer interface {
	CreateVirtualMachine(context.Context, *VirtualMachine) (*VirtualMachine, error)
	GetVirtualMachine(context.Context, *FilterOptions) (*VirtualMachine, error)
	ListVirtualMachine(context.Context, *FilterOptions) (*VirtualMachineList, error)
	DeleteVirtualMachine(context.Context, *FilterOptions) (*VirtualMachine, error)
	UpdateVirtualMachine(context.Context, *VirtualMachine) (*VirtualMachine, error)
	mustEmbedUnimplementedVirtualMachineServiceServer()
}

// UnimplementedVirtualMachineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVirtualMachineServiceServer struct {
}

func (UnimplementedVirtualMachineServiceServer) CreateVirtualMachine(context.Context, *VirtualMachine) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualMachine not implemented")
}
func (UnimplementedVirtualMachineServiceServer) GetVirtualMachine(context.Context, *FilterOptions) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualMachine not implemented")
}
func (UnimplementedVirtualMachineServiceServer) ListVirtualMachine(context.Context, *FilterOptions) (*VirtualMachineList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualMachine not implemented")
}
func (UnimplementedVirtualMachineServiceServer) DeleteVirtualMachine(context.Context, *FilterOptions) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualMachine not implemented")
}
func (UnimplementedVirtualMachineServiceServer) UpdateVirtualMachine(context.Context, *VirtualMachine) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualMachine not implemented")
}
func (UnimplementedVirtualMachineServiceServer) mustEmbedUnimplementedVirtualMachineServiceServer() {}

// UnsafeVirtualMachineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualMachineServiceServer will
// result in compilation errors.
type UnsafeVirtualMachineServiceServer interface {
	mustEmbedUnimplementedVirtualMachineServiceServer()
}

func RegisterVirtualMachineServiceServer(s grpc.ServiceRegistrar, srv VirtualMachineServiceServer) {
	s.RegisterService(&VirtualMachineService_ServiceDesc, srv)
}

func _VirtualMachineService_CreateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).CreateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualmachine.v1alpha1.VirtualMachineService/CreateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).CreateVirtualMachine(ctx, req.(*VirtualMachine))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_GetVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).GetVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualmachine.v1alpha1.VirtualMachineService/GetVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).GetVirtualMachine(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_ListVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).ListVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualmachine.v1alpha1.VirtualMachineService/ListVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).ListVirtualMachine(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_DeleteVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).DeleteVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualmachine.v1alpha1.VirtualMachineService/DeleteVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).DeleteVirtualMachine(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineService_UpdateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServiceServer).UpdateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualmachine.v1alpha1.VirtualMachineService/UpdateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServiceServer).UpdateVirtualMachine(ctx, req.(*VirtualMachine))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualMachineService_ServiceDesc is the grpc.ServiceDesc for VirtualMachineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualMachineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "virtualmachine.v1alpha1.VirtualMachineService",
	HandlerType: (*VirtualMachineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVirtualMachine",
			Handler:    _VirtualMachineService_CreateVirtualMachine_Handler,
		},
		{
			MethodName: "GetVirtualMachine",
			Handler:    _VirtualMachineService_GetVirtualMachine_Handler,
		},
		{
			MethodName: "ListVirtualMachine",
			Handler:    _VirtualMachineService_ListVirtualMachine_Handler,
		},
		{
			MethodName: "DeleteVirtualMachine",
			Handler:    _VirtualMachineService_DeleteVirtualMachine_Handler,
		},
		{
			MethodName: "UpdateVirtualMachine",
			Handler:    _VirtualMachineService_UpdateVirtualMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "virtualmachine.proto",
}
