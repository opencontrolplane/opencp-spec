// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: ip.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IpServiceClient is the client API for IpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpServiceClient interface {
	CreateIp(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*Ip, error)
	// rpc UpdateIp(Ip) returns (Ip) {}
	DeleteIp(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*Ip, error)
	GetIp(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*Ip, error)
	ListIp(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*IpList, error)
}

type ipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpServiceClient(cc grpc.ClientConnInterface) IpServiceClient {
	return &ipServiceClient{cc}
}

func (c *ipServiceClient) CreateIp(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*Ip, error) {
	out := new(Ip)
	err := c.cc.Invoke(ctx, "/ip.v1alpha1.IpService/CreateIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) DeleteIp(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*Ip, error) {
	out := new(Ip)
	err := c.cc.Invoke(ctx, "/ip.v1alpha1.IpService/DeleteIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) GetIp(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*Ip, error) {
	out := new(Ip)
	err := c.cc.Invoke(ctx, "/ip.v1alpha1.IpService/GetIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) ListIp(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*IpList, error) {
	out := new(IpList)
	err := c.cc.Invoke(ctx, "/ip.v1alpha1.IpService/ListIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpServiceServer is the server API for IpService service.
// All implementations must embed UnimplementedIpServiceServer
// for forward compatibility
type IpServiceServer interface {
	CreateIp(context.Context, *Ip) (*Ip, error)
	// rpc UpdateIp(Ip) returns (Ip) {}
	DeleteIp(context.Context, *FilterOptions) (*Ip, error)
	GetIp(context.Context, *FilterOptions) (*Ip, error)
	ListIp(context.Context, *FilterOptions) (*IpList, error)
	mustEmbedUnimplementedIpServiceServer()
}

// UnimplementedIpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIpServiceServer struct {
}

func (UnimplementedIpServiceServer) CreateIp(context.Context, *Ip) (*Ip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIp not implemented")
}
func (UnimplementedIpServiceServer) DeleteIp(context.Context, *FilterOptions) (*Ip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIp not implemented")
}
func (UnimplementedIpServiceServer) GetIp(context.Context, *FilterOptions) (*Ip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIp not implemented")
}
func (UnimplementedIpServiceServer) ListIp(context.Context, *FilterOptions) (*IpList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIp not implemented")
}
func (UnimplementedIpServiceServer) mustEmbedUnimplementedIpServiceServer() {}

// UnsafeIpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpServiceServer will
// result in compilation errors.
type UnsafeIpServiceServer interface {
	mustEmbedUnimplementedIpServiceServer()
}

func RegisterIpServiceServer(s grpc.ServiceRegistrar, srv IpServiceServer) {
	s.RegisterService(&IpService_ServiceDesc, srv)
}

func _IpService_CreateIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).CreateIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ip.v1alpha1.IpService/CreateIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).CreateIp(ctx, req.(*Ip))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_DeleteIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).DeleteIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ip.v1alpha1.IpService/DeleteIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).DeleteIp(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_GetIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).GetIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ip.v1alpha1.IpService/GetIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).GetIp(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_ListIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).ListIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ip.v1alpha1.IpService/ListIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).ListIp(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// IpService_ServiceDesc is the grpc.ServiceDesc for IpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ip.v1alpha1.IpService",
	HandlerType: (*IpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIp",
			Handler:    _IpService_CreateIp_Handler,
		},
		{
			MethodName: "DeleteIp",
			Handler:    _IpService_DeleteIp_Handler,
		},
		{
			MethodName: "GetIp",
			Handler:    _IpService_GetIp_Handler,
		},
		{
			MethodName: "ListIp",
			Handler:    _IpService_ListIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ip.proto",
}
