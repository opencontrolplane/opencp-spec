// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: objectstorage.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectStorageServiceClient is the client API for ObjectStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectStorageServiceClient interface {
	CreateObjectStorage(ctx context.Context, in *ObjectStorage, opts ...grpc.CallOption) (*ObjectStorage, error)
	// rpc UpdateObjectStorage(ObjectStorage) returns (ObjectStorage) {}
	DeleteObjectStorage(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*ObjectStorage, error)
	GetObjectStorage(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*ObjectStorage, error)
	ListObjectStorage(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*ObjectStorageList, error)
}

type objectStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectStorageServiceClient(cc grpc.ClientConnInterface) ObjectStorageServiceClient {
	return &objectStorageServiceClient{cc}
}

func (c *objectStorageServiceClient) CreateObjectStorage(ctx context.Context, in *ObjectStorage, opts ...grpc.CallOption) (*ObjectStorage, error) {
	out := new(ObjectStorage)
	err := c.cc.Invoke(ctx, "/objectstorage.v1alpha1.ObjectStorageService/CreateObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) DeleteObjectStorage(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*ObjectStorage, error) {
	out := new(ObjectStorage)
	err := c.cc.Invoke(ctx, "/objectstorage.v1alpha1.ObjectStorageService/DeleteObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) GetObjectStorage(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*ObjectStorage, error) {
	out := new(ObjectStorage)
	err := c.cc.Invoke(ctx, "/objectstorage.v1alpha1.ObjectStorageService/GetObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) ListObjectStorage(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*ObjectStorageList, error) {
	out := new(ObjectStorageList)
	err := c.cc.Invoke(ctx, "/objectstorage.v1alpha1.ObjectStorageService/ListObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectStorageServiceServer is the server API for ObjectStorageService service.
// All implementations must embed UnimplementedObjectStorageServiceServer
// for forward compatibility
type ObjectStorageServiceServer interface {
	CreateObjectStorage(context.Context, *ObjectStorage) (*ObjectStorage, error)
	// rpc UpdateObjectStorage(ObjectStorage) returns (ObjectStorage) {}
	DeleteObjectStorage(context.Context, *FilterOptions) (*ObjectStorage, error)
	GetObjectStorage(context.Context, *FilterOptions) (*ObjectStorage, error)
	ListObjectStorage(context.Context, *FilterOptions) (*ObjectStorageList, error)
	mustEmbedUnimplementedObjectStorageServiceServer()
}

// UnimplementedObjectStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedObjectStorageServiceServer struct {
}

func (UnimplementedObjectStorageServiceServer) CreateObjectStorage(context.Context, *ObjectStorage) (*ObjectStorage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectStorage not implemented")
}
func (UnimplementedObjectStorageServiceServer) DeleteObjectStorage(context.Context, *FilterOptions) (*ObjectStorage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectStorage not implemented")
}
func (UnimplementedObjectStorageServiceServer) GetObjectStorage(context.Context, *FilterOptions) (*ObjectStorage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectStorage not implemented")
}
func (UnimplementedObjectStorageServiceServer) ListObjectStorage(context.Context, *FilterOptions) (*ObjectStorageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectStorage not implemented")
}
func (UnimplementedObjectStorageServiceServer) mustEmbedUnimplementedObjectStorageServiceServer() {}

// UnsafeObjectStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectStorageServiceServer will
// result in compilation errors.
type UnsafeObjectStorageServiceServer interface {
	mustEmbedUnimplementedObjectStorageServiceServer()
}

func RegisterObjectStorageServiceServer(s grpc.ServiceRegistrar, srv ObjectStorageServiceServer) {
	s.RegisterService(&ObjectStorageService_ServiceDesc, srv)
}

func _ObjectStorageService_CreateObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).CreateObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objectstorage.v1alpha1.ObjectStorageService/CreateObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).CreateObjectStorage(ctx, req.(*ObjectStorage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_DeleteObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).DeleteObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objectstorage.v1alpha1.ObjectStorageService/DeleteObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).DeleteObjectStorage(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_GetObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).GetObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objectstorage.v1alpha1.ObjectStorageService/GetObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).GetObjectStorage(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_ListObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).ListObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objectstorage.v1alpha1.ObjectStorageService/ListObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).ListObjectStorage(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectStorageService_ServiceDesc is the grpc.ServiceDesc for ObjectStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "objectstorage.v1alpha1.ObjectStorageService",
	HandlerType: (*ObjectStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObjectStorage",
			Handler:    _ObjectStorageService_CreateObjectStorage_Handler,
		},
		{
			MethodName: "DeleteObjectStorage",
			Handler:    _ObjectStorageService_DeleteObjectStorage_Handler,
		},
		{
			MethodName: "GetObjectStorage",
			Handler:    _ObjectStorageService_GetObjectStorage_Handler,
		},
		{
			MethodName: "ListObjectStorage",
			Handler:    _ObjectStorageService_ListObjectStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "objectstorage.proto",
}
