// This proto file is to represent the data structure of the instance

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: virtualmachine.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VirtualMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// The spec of the virtual machine.
	Spec *VirtualMachineSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// The status of the virtual machine.
	Status *VirtualMachineStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *VirtualMachine) Reset() {
	*x = VirtualMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virtualmachine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachine) ProtoMessage() {}

func (x *VirtualMachine) ProtoReflect() protoreflect.Message {
	mi := &file_virtualmachine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachine.ProtoReflect.Descriptor instead.
func (*VirtualMachine) Descriptor() ([]byte, []int) {
	return file_virtualmachine_proto_rawDescGZIP(), []int{0}
}

func (x *VirtualMachine) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VirtualMachine) GetSpec() *VirtualMachineSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *VirtualMachine) GetStatus() *VirtualMachineStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type VirtualMachineSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size         string              `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	Firewall     string              `protobuf:"bytes,2,opt,name=firewall,proto3" json:"firewall,omitempty"`
	Ipv4         bool                `protobuf:"varint,3,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6         bool                `protobuf:"varint,4,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	StaticIP     string              `protobuf:"bytes,5,opt,name=staticIP,proto3" json:"staticIP,omitempty"`
	StorageClass string              `protobuf:"bytes,6,opt,name=storageClass,proto3" json:"storageClass,omitempty"`
	Image        string              `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	Auth         *VirtualMachineAuth `protobuf:"bytes,8,opt,name=Auth,proto3" json:"Auth,omitempty"`
	Tags         []string            `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	CloudInit    string              `protobuf:"bytes,10,opt,name=cloudInit,proto3" json:"cloudInit,omitempty"`
	UserScript   string              `protobuf:"bytes,11,opt,name=userScript,proto3" json:"userScript,omitempty"`
}

func (x *VirtualMachineSpec) Reset() {
	*x = VirtualMachineSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virtualmachine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineSpec) ProtoMessage() {}

func (x *VirtualMachineSpec) ProtoReflect() protoreflect.Message {
	mi := &file_virtualmachine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineSpec.ProtoReflect.Descriptor instead.
func (*VirtualMachineSpec) Descriptor() ([]byte, []int) {
	return file_virtualmachine_proto_rawDescGZIP(), []int{1}
}

func (x *VirtualMachineSpec) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *VirtualMachineSpec) GetFirewall() string {
	if x != nil {
		return x.Firewall
	}
	return ""
}

func (x *VirtualMachineSpec) GetIpv4() bool {
	if x != nil {
		return x.Ipv4
	}
	return false
}

func (x *VirtualMachineSpec) GetIpv6() bool {
	if x != nil {
		return x.Ipv6
	}
	return false
}

func (x *VirtualMachineSpec) GetStaticIP() string {
	if x != nil {
		return x.StaticIP
	}
	return ""
}

func (x *VirtualMachineSpec) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

func (x *VirtualMachineSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *VirtualMachineSpec) GetAuth() *VirtualMachineAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *VirtualMachineSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *VirtualMachineSpec) GetCloudInit() string {
	if x != nil {
		return x.CloudInit
	}
	return ""
}

func (x *VirtualMachineSpec) GetUserScript() string {
	if x != nil {
		return x.UserScript
	}
	return ""
}

type VirtualMachineAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password *string `protobuf:"bytes,2,opt,name=password,proto3,oneof" json:"password,omitempty"`
	SshKey   string  `protobuf:"bytes,3,opt,name=sshKey,proto3" json:"sshKey,omitempty"`
}

func (x *VirtualMachineAuth) Reset() {
	*x = VirtualMachineAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virtualmachine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineAuth) ProtoMessage() {}

func (x *VirtualMachineAuth) ProtoReflect() protoreflect.Message {
	mi := &file_virtualmachine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineAuth.ProtoReflect.Descriptor instead.
func (*VirtualMachineAuth) Descriptor() ([]byte, []int) {
	return file_virtualmachine_proto_rawDescGZIP(), []int{2}
}

func (x *VirtualMachineAuth) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *VirtualMachineAuth) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *VirtualMachineAuth) GetSshKey() string {
	if x != nil {
		return x.SshKey
	}
	return ""
}

type VirtualMachineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateIP string `protobuf:"bytes,1,opt,name=privateIP,proto3" json:"privateIP,omitempty"`
	PublicIP  string `protobuf:"bytes,2,opt,name=publicIP,proto3" json:"publicIP,omitempty"`
	State     string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *VirtualMachineStatus) Reset() {
	*x = VirtualMachineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virtualmachine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineStatus) ProtoMessage() {}

func (x *VirtualMachineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_virtualmachine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineStatus.ProtoReflect.Descriptor instead.
func (*VirtualMachineStatus) Descriptor() ([]byte, []int) {
	return file_virtualmachine_proto_rawDescGZIP(), []int{3}
}

func (x *VirtualMachineStatus) GetPrivateIP() string {
	if x != nil {
		return x.PrivateIP
	}
	return ""
}

func (x *VirtualMachineStatus) GetPublicIP() string {
	if x != nil {
		return x.PublicIP
	}
	return ""
}

func (x *VirtualMachineStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// VirtualMachineList is a list of VirtualMachine.
type VirtualMachineList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard list metadata.
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// Items is the list of VistualMachine.
	Items []*VirtualMachine `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *VirtualMachineList) Reset() {
	*x = VirtualMachineList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virtualmachine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineList) ProtoMessage() {}

func (x *VirtualMachineList) ProtoReflect() protoreflect.Message {
	mi := &file_virtualmachine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineList.ProtoReflect.Descriptor instead.
func (*VirtualMachineList) Descriptor() ([]byte, []int) {
	return file_virtualmachine_proto_rawDescGZIP(), []int{4}
}

func (x *VirtualMachineList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VirtualMachineList) GetItems() []*VirtualMachine {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_virtualmachine_proto protoreflect.FileDescriptor

var file_virtualmachine_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x01, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x45, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd5, 0x02, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70,
	0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x6e, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x66, 0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x50, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xb1, 0x01, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x32, 0xff, 0x03, 0x0a, 0x15, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x1a, 0x27,
	0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x16,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x27, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x2b, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x27,
	0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x12, 0x27, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x1a, 0x27, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x22, 0x00, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x70, 0x2d, 0x73, 0x70, 0x65, 0x63,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_virtualmachine_proto_rawDescOnce sync.Once
	file_virtualmachine_proto_rawDescData = file_virtualmachine_proto_rawDesc
)

func file_virtualmachine_proto_rawDescGZIP() []byte {
	file_virtualmachine_proto_rawDescOnce.Do(func() {
		file_virtualmachine_proto_rawDescData = protoimpl.X.CompressGZIP(file_virtualmachine_proto_rawDescData)
	})
	return file_virtualmachine_proto_rawDescData
}

var file_virtualmachine_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_virtualmachine_proto_goTypes = []interface{}{
	(*VirtualMachine)(nil),       // 0: virtualmachine.v1alpha1.VirtualMachine
	(*VirtualMachineSpec)(nil),   // 1: virtualmachine.v1alpha1.VirtualMachineSpec
	(*VirtualMachineAuth)(nil),   // 2: virtualmachine.v1alpha1.VirtualMachineAuth
	(*VirtualMachineStatus)(nil), // 3: virtualmachine.v1alpha1.VirtualMachineStatus
	(*VirtualMachineList)(nil),   // 4: virtualmachine.v1alpha1.VirtualMachineList
	(*v1.ObjectMeta)(nil),        // 5: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*v1.ListMeta)(nil),          // 6: k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	(*FilterOptions)(nil),        // 7: options.FilterOptions
}
var file_virtualmachine_proto_depIdxs = []int32{
	5,  // 0: virtualmachine.v1alpha1.VirtualMachine.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	1,  // 1: virtualmachine.v1alpha1.VirtualMachine.spec:type_name -> virtualmachine.v1alpha1.VirtualMachineSpec
	3,  // 2: virtualmachine.v1alpha1.VirtualMachine.status:type_name -> virtualmachine.v1alpha1.VirtualMachineStatus
	2,  // 3: virtualmachine.v1alpha1.VirtualMachineSpec.Auth:type_name -> virtualmachine.v1alpha1.VirtualMachineAuth
	6,  // 4: virtualmachine.v1alpha1.VirtualMachineList.metadata:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	0,  // 5: virtualmachine.v1alpha1.VirtualMachineList.items:type_name -> virtualmachine.v1alpha1.VirtualMachine
	0,  // 6: virtualmachine.v1alpha1.VirtualMachineService.CreateVirtualMachine:input_type -> virtualmachine.v1alpha1.VirtualMachine
	7,  // 7: virtualmachine.v1alpha1.VirtualMachineService.GetVirtualMachine:input_type -> options.FilterOptions
	7,  // 8: virtualmachine.v1alpha1.VirtualMachineService.ListVirtualMachine:input_type -> options.FilterOptions
	7,  // 9: virtualmachine.v1alpha1.VirtualMachineService.DeleteVirtualMachine:input_type -> options.FilterOptions
	0,  // 10: virtualmachine.v1alpha1.VirtualMachineService.UpdateVirtualMachine:input_type -> virtualmachine.v1alpha1.VirtualMachine
	0,  // 11: virtualmachine.v1alpha1.VirtualMachineService.CreateVirtualMachine:output_type -> virtualmachine.v1alpha1.VirtualMachine
	0,  // 12: virtualmachine.v1alpha1.VirtualMachineService.GetVirtualMachine:output_type -> virtualmachine.v1alpha1.VirtualMachine
	4,  // 13: virtualmachine.v1alpha1.VirtualMachineService.ListVirtualMachine:output_type -> virtualmachine.v1alpha1.VirtualMachineList
	0,  // 14: virtualmachine.v1alpha1.VirtualMachineService.DeleteVirtualMachine:output_type -> virtualmachine.v1alpha1.VirtualMachine
	0,  // 15: virtualmachine.v1alpha1.VirtualMachineService.UpdateVirtualMachine:output_type -> virtualmachine.v1alpha1.VirtualMachine
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_virtualmachine_proto_init() }
func file_virtualmachine_proto_init() {
	if File_virtualmachine_proto != nil {
		return
	}
	file_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_virtualmachine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virtualmachine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virtualmachine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virtualmachine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virtualmachine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_virtualmachine_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_virtualmachine_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_virtualmachine_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_virtualmachine_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_virtualmachine_proto_goTypes,
		DependencyIndexes: file_virtualmachine_proto_depIdxs,
		MessageInfos:      file_virtualmachine_proto_msgTypes,
	}.Build()
	File_virtualmachine_proto = out.File
	file_virtualmachine_proto_rawDesc = nil
	file_virtualmachine_proto_goTypes = nil
	file_virtualmachine_proto_depIdxs = nil
}
