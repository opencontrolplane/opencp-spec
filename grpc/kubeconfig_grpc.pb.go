// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: kubeconfig.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KubeconfigServiceClient is the client API for KubeconfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubeconfigServiceClient interface {
	GetKubeconfig(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*Kubeconfig, error)
}

type kubeconfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKubeconfigServiceClient(cc grpc.ClientConnInterface) KubeconfigServiceClient {
	return &kubeconfigServiceClient{cc}
}

func (c *kubeconfigServiceClient) GetKubeconfig(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*Kubeconfig, error) {
	out := new(Kubeconfig)
	err := c.cc.Invoke(ctx, "/kubeconfig.v1alpha1.KubeconfigService/GetKubeconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubeconfigServiceServer is the server API for KubeconfigService service.
// All implementations must embed UnimplementedKubeconfigServiceServer
// for forward compatibility
type KubeconfigServiceServer interface {
	GetKubeconfig(context.Context, *FilterOptions) (*Kubeconfig, error)
	mustEmbedUnimplementedKubeconfigServiceServer()
}

// UnimplementedKubeconfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKubeconfigServiceServer struct {
}

func (UnimplementedKubeconfigServiceServer) GetKubeconfig(context.Context, *FilterOptions) (*Kubeconfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeconfig not implemented")
}
func (UnimplementedKubeconfigServiceServer) mustEmbedUnimplementedKubeconfigServiceServer() {}

// UnsafeKubeconfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubeconfigServiceServer will
// result in compilation errors.
type UnsafeKubeconfigServiceServer interface {
	mustEmbedUnimplementedKubeconfigServiceServer()
}

func RegisterKubeconfigServiceServer(s grpc.ServiceRegistrar, srv KubeconfigServiceServer) {
	s.RegisterService(&KubeconfigService_ServiceDesc, srv)
}

func _KubeconfigService_GetKubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeconfigServiceServer).GetKubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeconfig.v1alpha1.KubeconfigService/GetKubeconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeconfigServiceServer).GetKubeconfig(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// KubeconfigService_ServiceDesc is the grpc.ServiceDesc for KubeconfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubeconfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubeconfig.v1alpha1.KubeconfigService",
	HandlerType: (*KubeconfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKubeconfig",
			Handler:    _KubeconfigService_GetKubeconfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kubeconfig.proto",
}
