// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: sshkey.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SSHKeyServiceClient is the client API for SSHKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSHKeyServiceClient interface {
	CreateSSHKey(ctx context.Context, in *SSHKey, opts ...grpc.CallOption) (*SSHKey, error)
	GetSSHKey(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*SSHKey, error)
	// rpc UpdateDomain(Domain) returns (Domain) {}
	DeleteSSHKey(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*SSHKey, error)
	ListSSHKey(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*SSHKeyList, error)
}

type sSHKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSHKeyServiceClient(cc grpc.ClientConnInterface) SSHKeyServiceClient {
	return &sSHKeyServiceClient{cc}
}

func (c *sSHKeyServiceClient) CreateSSHKey(ctx context.Context, in *SSHKey, opts ...grpc.CallOption) (*SSHKey, error) {
	out := new(SSHKey)
	err := c.cc.Invoke(ctx, "/sshkey.v1alpha1.SSHKeyService/CreateSSHKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSHKeyServiceClient) GetSSHKey(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*SSHKey, error) {
	out := new(SSHKey)
	err := c.cc.Invoke(ctx, "/sshkey.v1alpha1.SSHKeyService/GetSSHKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSHKeyServiceClient) DeleteSSHKey(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*SSHKey, error) {
	out := new(SSHKey)
	err := c.cc.Invoke(ctx, "/sshkey.v1alpha1.SSHKeyService/DeleteSSHKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSHKeyServiceClient) ListSSHKey(ctx context.Context, in *FilterOptions, opts ...grpc.CallOption) (*SSHKeyList, error) {
	out := new(SSHKeyList)
	err := c.cc.Invoke(ctx, "/sshkey.v1alpha1.SSHKeyService/ListSSHKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSHKeyServiceServer is the server API for SSHKeyService service.
// All implementations must embed UnimplementedSSHKeyServiceServer
// for forward compatibility
type SSHKeyServiceServer interface {
	CreateSSHKey(context.Context, *SSHKey) (*SSHKey, error)
	GetSSHKey(context.Context, *FilterOptions) (*SSHKey, error)
	// rpc UpdateDomain(Domain) returns (Domain) {}
	DeleteSSHKey(context.Context, *FilterOptions) (*SSHKey, error)
	ListSSHKey(context.Context, *FilterOptions) (*SSHKeyList, error)
	mustEmbedUnimplementedSSHKeyServiceServer()
}

// UnimplementedSSHKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSSHKeyServiceServer struct {
}

func (UnimplementedSSHKeyServiceServer) CreateSSHKey(context.Context, *SSHKey) (*SSHKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSSHKey not implemented")
}
func (UnimplementedSSHKeyServiceServer) GetSSHKey(context.Context, *FilterOptions) (*SSHKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSHKey not implemented")
}
func (UnimplementedSSHKeyServiceServer) DeleteSSHKey(context.Context, *FilterOptions) (*SSHKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSSHKey not implemented")
}
func (UnimplementedSSHKeyServiceServer) ListSSHKey(context.Context, *FilterOptions) (*SSHKeyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSSHKey not implemented")
}
func (UnimplementedSSHKeyServiceServer) mustEmbedUnimplementedSSHKeyServiceServer() {}

// UnsafeSSHKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSHKeyServiceServer will
// result in compilation errors.
type UnsafeSSHKeyServiceServer interface {
	mustEmbedUnimplementedSSHKeyServiceServer()
}

func RegisterSSHKeyServiceServer(s grpc.ServiceRegistrar, srv SSHKeyServiceServer) {
	s.RegisterService(&SSHKeyService_ServiceDesc, srv)
}

func _SSHKeyService_CreateSSHKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSHKeyServiceServer).CreateSSHKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sshkey.v1alpha1.SSHKeyService/CreateSSHKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSHKeyServiceServer).CreateSSHKey(ctx, req.(*SSHKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSHKeyService_GetSSHKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSHKeyServiceServer).GetSSHKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sshkey.v1alpha1.SSHKeyService/GetSSHKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSHKeyServiceServer).GetSSHKey(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSHKeyService_DeleteSSHKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSHKeyServiceServer).DeleteSSHKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sshkey.v1alpha1.SSHKeyService/DeleteSSHKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSHKeyServiceServer).DeleteSSHKey(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSHKeyService_ListSSHKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSHKeyServiceServer).ListSSHKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sshkey.v1alpha1.SSHKeyService/ListSSHKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSHKeyServiceServer).ListSSHKey(ctx, req.(*FilterOptions))
	}
	return interceptor(ctx, in, info, handler)
}

// SSHKeyService_ServiceDesc is the grpc.ServiceDesc for SSHKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSHKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sshkey.v1alpha1.SSHKeyService",
	HandlerType: (*SSHKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSSHKey",
			Handler:    _SSHKeyService_CreateSSHKey_Handler,
		},
		{
			MethodName: "GetSSHKey",
			Handler:    _SSHKeyService_GetSSHKey_Handler,
		},
		{
			MethodName: "DeleteSSHKey",
			Handler:    _SSHKeyService_DeleteSSHKey_Handler,
		},
		{
			MethodName: "ListSSHKey",
			Handler:    _SSHKeyService_ListSSHKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sshkey.proto",
}
